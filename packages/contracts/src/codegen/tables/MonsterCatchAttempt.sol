// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { MonsterCatchResult } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("MonsterCatchAtte")));
bytes32 constant MonsterCatchAttemptTableId = _tableId;

library MonsterCatchAttempt {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "encounter";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](1);
    fieldNames[0] = "result";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Emit the ephemeral event using individual values */
  function emitEphemeral(bytes32 encounter, MonsterCatchResult result) internal {
    bytes memory _data = encode(result);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = encounter;

    StoreSwitch.emitEphemeralRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Emit the ephemeral event using individual values (using the specified store) */
  function emitEphemeral(IStore _store, bytes32 encounter, MonsterCatchResult result) internal {
    bytes memory _data = encode(result);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = encounter;

    _store.emitEphemeralRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Tightly pack full data using this table's schema */
  function encode(MonsterCatchResult result) internal pure returns (bytes memory) {
    return abi.encodePacked(result);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 encounter) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = encounter;

    return _keyTuple;
  }
}
